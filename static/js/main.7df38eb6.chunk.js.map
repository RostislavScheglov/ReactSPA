{"version":3,"sources":["Header/Header.module.css","components/todoInput/todoInput.module.css","components/MyTasks/MyTasks.module.css","Context.js","components/MyTasks/todoItem.jsx","components/MyTasks/MyTasks.jsx","Header/Header.jsx","components/todoInput/todoInput.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Context","React","createContext","TodoItem","index","tasks","onChange","removeTodo","useContext","classes","complited","push","className","join","type","checked","id","task","onClick","MyTasks","props","TaskItem","state","map","key","style","Header","styles","header","title","subTitle","TodoInput","onCreate","useState","value","setValue","form","placeholder","event","target","input","preventDefault","trim","btn","App","setTasks","Provider","filter","concat","Date","now","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7df38eb6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2FLWk\",\"title\":\"Header_title__38ktX\",\"subTitle\":\"Header_subTitle__1fW63\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"todoInput_form__3hh49\",\"input\":\"todoInput_input__22MhV\",\"btn\":\"todoInput_btn__38pw2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MyTasks\":\"MyTasks_MyTasks__wVsw-\"};","import React from 'react';\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context;","import React, {useContext} from 'react';\r\nimport Context from '../../Context';\r\nimport  './todoItem.css';\r\n\r\nconst TodoItem = ({index, tasks, onChange}) => {\r\n\r\n    const {removeTodo} = useContext(Context);\r\n\r\n    const classes = ['flex'];\r\n\r\n    if (tasks.complited) {\r\n        classes.push('done')\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"todoItem\">\r\n\r\n            <div className={classes.join(' ')} >\r\n                <input type=\"checkbox\" className='checkbox'\r\n                checked={tasks.complited} \r\n                onChange={() => onChange(tasks.id)}/>\r\n                <span className='task' >{tasks.task}</span> \r\n            </div>\r\n\r\n            \r\n            <button className='deletBtn' onClick={()=>removeTodo(tasks.id)}></button>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport style from './MyTasks.module.css';\r\nimport TodoItem from './todoItem';\r\n\r\n\r\nconst MyTasks =(props)=>{\r\n    \r\n   let TaskItem = props.state.map((tasks, index)=>{\r\n       return <TodoItem tasks={tasks}  key={tasks.id} index={index}\r\n                onChange={props.onChange}\r\n   />});\r\n\r\n    return(\r\n        <ul className={style.MyTasks}>\r\n            {TaskItem}\r\n        </ul>\r\n    );\r\n}\r\n\r\n\r\nexport default MyTasks;","import React from 'react';\r\nimport styles from './Header.module.css';\r\n\r\nconst Header = (props)=>{\r\n    return(\r\n    <header className={styles.header}>\r\n        <h2 className={styles.title}>Create a plan</h2>\r\n        <span className={styles.subTitle}>Don’t keep your plans in mind, just add your tasks to the “to do” list</span>\r\n    </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, {useState} from 'react';\r\nimport style from './todoInput.module.css';\r\n\r\nconst TodoInput =({onCreate})=>{\r\n    const [value, setValue] = useState('')\r\n\r\nfunction submitHandler(event){\r\n    event.preventDefault()\r\n\r\n    if(value.trim()){\r\n        onCreate(value)\r\n        setValue('')\r\n    }\r\n}\r\n\r\n    return(\r\n        <form className={style.form}>\r\n            <input value={value} placeholder='Write what you need to do...' onChange={event=> setValue(event.target.value)}\r\n                className={style.input}>\r\n            </input> \r\n            <button  type='submit' onClick={submitHandler}\r\n                className={style.btn}>\r\n            </button>\r\n        </form>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default TodoInput;","import React from 'react';\nimport './app.css';\nimport MyTasks from './components/MyTasks/MyTasks';\nimport Header from './Header/Header';\nimport Context from './Context';\nimport TodoInput from './components/todoInput/todoInput';\n\n\nfunction App() {\n\n\n\n  \n    let [tasks, setTasks]=React.useState([\n      { id:1, task:'Купить енота', complited: true },\n      { id:2, task:'Покормить енота', complited: false },\n      { id:3, task:'Обнять енота', complited: true },\n      { id:4, task:'Купить дом для енота', complited: false }\n    ]);\n\n \n\n  function onChange(id){\n    setTasks(tasks.map(task=>{\n      if(task.id===id){\n        task.complited=!task.complited\n      }\n      return task\n    }))\n}\n  function removeTodo (id){\n  setTasks(tasks.filter(task=>task.id !==id))\n}\n\n  function addTodo(task){\n  setTasks(tasks.concat([{\n  task,\n  id:Date.now(),\n  complited: false\n  }]))\n\n}\n\n\n  return (\n<Context.Provider value={{removeTodo}}>\n\n    <div className='grid'>\n        <div className = 'Bg'> <div className='logo' /> </div>\n        <Header  />\n        <TodoInput onCreate={addTodo} />\n        {tasks.length ? <MyTasks  state ={tasks} \n        onChange={onChange}/> : <p className='noTasks'>No current tasks!</p>}\n    </div>\n\n</Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}